version: '3.8'

services:
  db:
    image: postgres:17
    environment:
      POSTGRES_DB: iot_lab_db
      POSTGRES_USER: iot_user
      POSTGRES_PASSWORD: iot_secure_password_2025
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "10001:5432"
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    ports:
      - "10002:6379"
    networks:
      - app-network

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn backend.wsgi:application --bind 0.0.0.0:8000 --workers 4"
    volumes:
      - ./server:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "10003:8000"
    environment:
      - DEBUG=False
      - SECRET_KEY=iot-lab-super-secret-key-for-production-2025
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,backend,frontend
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=iot_lab_db
      - DB_USER=iot_user
      - DB_PASSWORD=iot_secure_password_2025
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CORS_ALLOW_ALL_ORIGINS=True
    depends_on:
      - db
      - redis
    networks:
      - app-network

  frontend:
    image: nginx:alpine
    volumes:
      - ./client:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "10004:80"
    depends_on:
      - backend
    networks:
      - app-network

  celery:
    build:
      context: ./server
      dockerfile: Dockerfile
    command: celery -A backend worker --loglevel=info
    volumes:
      - ./server:/app
    environment:
      - DEBUG=False
      - SECRET_KEY=iot-lab-super-secret-key-for-production-2025
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=iot_lab_db
      - DB_USER=iot_user
      - DB_PASSWORD=iot_secure_password_2025
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
      - backend
    networks:
      - app-network

volumes:
  pgdata:
  static_volume:
  media_volume:

networks:
  app-network:
    driver: bridge
